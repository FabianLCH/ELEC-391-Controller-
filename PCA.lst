0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Fri Mar 22 14:38:53 2019
0000              5   ;--------------------------------------------------------
                  5   $name PCA
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _calculateSteps
0000             29            public _wsReadByte
0000             30            public _SPIWrite
0000             31            public _ConfigurePins
0000             32            public _ConfigPCA0
0000             33            public _Volts_at_Pin
0000             34            public _ADC_at_Pin
0000             35            public _InitADC
0000             36            public _delay_us
0000             37            public _Timer3_ISR
0000             38            public _Timer2_ISR
0000             39            public __c51_external_startup
0000             40            public _spiBytes
0000             41            public _spiByteNum
0000             42            public _windAngle
0000             43            public _totalSteps
0000             44            public _interruptCount
0000             45            public _stepNumber
0000             46            public _delayFlag
0000             47            public _stepsCCW
0000             48            public _stepsCW
0000             49            public _moveStepperFlag
0000             50            public _direction
0000             51            public _adcFlag
0000             52   ;--------------------------------------------------------
0000             53   ; Special Function Registers
0000             54   ;--------------------------------------------------------
0000             55   _ACC            DATA 0xe0
0000             56   _ADC0ASAH       DATA 0xb6
0000             57   _ADC0ASAL       DATA 0xb5
0000             58   _ADC0ASCF       DATA 0xa1
0000             59   _ADC0ASCT       DATA 0xc7
0000             60   _ADC0CF0        DATA 0xbc
0000             61   _ADC0CF1        DATA 0xb9
0000             62   _ADC0CF2        DATA 0xdf
0000             63   _ADC0CN0        DATA 0xe8
0000             64   _ADC0CN1        DATA 0xb2
0000             65   _ADC0CN2        DATA 0xb3
0000             66   _ADC0GTH        DATA 0xc4
0000             67   _ADC0GTL        DATA 0xc3
0000             68   _ADC0H          DATA 0xbe
0000             69   _ADC0L          DATA 0xbd
0000             70   _ADC0LTH        DATA 0xc6
0000             71   _ADC0LTL        DATA 0xc5
0000             72   _ADC0MX         DATA 0xbb
0000             73   _B              DATA 0xf0
0000             74   _CKCON0         DATA 0x8e
0000             75   _CKCON1         DATA 0xa6
0000             76   _CLEN0          DATA 0xc6
0000             77   _CLIE0          DATA 0xc7
0000             78   _CLIF0          DATA 0xe8
0000             79   _CLKSEL         DATA 0xa9
0000             80   _CLOUT0         DATA 0xd1
0000             81   _CLU0CF         DATA 0xb1
0000             82   _CLU0FN         DATA 0xaf
0000             83   _CLU0MX         DATA 0x84
0000             84   _CLU1CF         DATA 0xb3
0000             85   _CLU1FN         DATA 0xb2
0000             86   _CLU1MX         DATA 0x85
0000             87   _CLU2CF         DATA 0xb6
0000             88   _CLU2FN         DATA 0xb5
0000             89   _CLU2MX         DATA 0x91
0000             90   _CLU3CF         DATA 0xbf
0000             91   _CLU3FN         DATA 0xbe
0000             92   _CLU3MX         DATA 0xae
0000             93   _CMP0CN0        DATA 0x9b
0000             94   _CMP0CN1        DATA 0x99
0000             95   _CMP0MD         DATA 0x9d
0000             96   _CMP0MX         DATA 0x9f
0000             97   _CMP1CN0        DATA 0xbf
0000             98   _CMP1CN1        DATA 0xac
0000             99   _CMP1MD         DATA 0xab
0000            100   _CMP1MX         DATA 0xaa
0000            101   _CRC0CN0        DATA 0xce
0000            102   _CRC0CN1        DATA 0x86
0000            103   _CRC0CNT        DATA 0xd3
0000            104   _CRC0DAT        DATA 0xcb
0000            105   _CRC0FLIP       DATA 0xcf
0000            106   _CRC0IN         DATA 0xca
0000            107   _CRC0ST         DATA 0xd2
0000            108   _DAC0CF0        DATA 0x91
0000            109   _DAC0CF1        DATA 0x92
0000            110   _DAC0H          DATA 0x85
0000            111   _DAC0L          DATA 0x84
0000            112   _DAC1CF0        DATA 0x93
0000            113   _DAC1CF1        DATA 0x94
0000            114   _DAC1H          DATA 0x8a
0000            115   _DAC1L          DATA 0x89
0000            116   _DAC2CF0        DATA 0x95
0000            117   _DAC2CF1        DATA 0x96
0000            118   _DAC2H          DATA 0x8c
0000            119   _DAC2L          DATA 0x8b
0000            120   _DAC3CF0        DATA 0x9a
0000            121   _DAC3CF1        DATA 0x9c
0000            122   _DAC3H          DATA 0x8e
0000            123   _DAC3L          DATA 0x8d
0000            124   _DACGCF0        DATA 0x88
0000            125   _DACGCF1        DATA 0x98
0000            126   _DACGCF2        DATA 0xa2
0000            127   _DERIVID        DATA 0xad
0000            128   _DEVICEID       DATA 0xb5
0000            129   _DPH            DATA 0x83
0000            130   _DPL            DATA 0x82
0000            131   _EIE1           DATA 0xe6
0000            132   _EIE2           DATA 0xf3
0000            133   _EIP1           DATA 0xbb
0000            134   _EIP1H          DATA 0xee
0000            135   _EIP2           DATA 0xed
0000            136   _EIP2H          DATA 0xf6
0000            137   _EMI0CN         DATA 0xe7
0000            138   _FLKEY          DATA 0xb7
0000            139   _HFO0CAL        DATA 0xc7
0000            140   _HFO1CAL        DATA 0xd6
0000            141   _HFOCN          DATA 0xef
0000            142   _I2C0ADM        DATA 0xff
0000            143   _I2C0CN0        DATA 0xba
0000            144   _I2C0DIN        DATA 0xbc
0000            145   _I2C0DOUT       DATA 0xbb
0000            146   _I2C0FCN0       DATA 0xad
0000            147   _I2C0FCN1       DATA 0xab
0000            148   _I2C0FCT        DATA 0xf5
0000            149   _I2C0SLAD       DATA 0xbd
0000            150   _I2C0STAT       DATA 0xb9
0000            151   _IE             DATA 0xa8
0000            152   _IP             DATA 0xb8
0000            153   _IPH            DATA 0xf2
0000            154   _IT01CF         DATA 0xe4
0000            155   _LFO0CN         DATA 0xb1
0000            156   _P0             DATA 0x80
0000            157   _P0MASK         DATA 0xfe
0000            158   _P0MAT          DATA 0xfd
0000            159   _P0MDIN         DATA 0xf1
0000            160   _P0MDOUT        DATA 0xa4
0000            161   _P0SKIP         DATA 0xd4
0000            162   _P1             DATA 0x90
0000            163   _P1MASK         DATA 0xee
0000            164   _P1MAT          DATA 0xed
0000            165   _P1MDIN         DATA 0xf2
0000            166   _P1MDOUT        DATA 0xa5
0000            167   _P1SKIP         DATA 0xd5
0000            168   _P2             DATA 0xa0
0000            169   _P2MASK         DATA 0xfc
0000            170   _P2MAT          DATA 0xfb
0000            171   _P2MDIN         DATA 0xf3
0000            172   _P2MDOUT        DATA 0xa6
0000            173   _P2SKIP         DATA 0xcc
0000            174   _P3             DATA 0xb0
0000            175   _P3MDIN         DATA 0xf4
0000            176   _P3MDOUT        DATA 0x9c
0000            177   _PCA0CENT       DATA 0x9e
0000            178   _PCA0CLR        DATA 0x9c
0000            179   _PCA0CN0        DATA 0xd8
0000            180   _PCA0CPH0       DATA 0xfc
0000            181   _PCA0CPH1       DATA 0xea
0000            182   _PCA0CPH2       DATA 0xec
0000            183   _PCA0CPH3       DATA 0xf5
0000            184   _PCA0CPH4       DATA 0x85
0000            185   _PCA0CPH5       DATA 0xde
0000            186   _PCA0CPL0       DATA 0xfb
0000            187   _PCA0CPL1       DATA 0xe9
0000            188   _PCA0CPL2       DATA 0xeb
0000            189   _PCA0CPL3       DATA 0xf4
0000            190   _PCA0CPL4       DATA 0x84
0000            191   _PCA0CPL5       DATA 0xdd
0000            192   _PCA0CPM0       DATA 0xda
0000            193   _PCA0CPM1       DATA 0xdb
0000            194   _PCA0CPM2       DATA 0xdc
0000            195   _PCA0CPM3       DATA 0xae
0000            196   _PCA0CPM4       DATA 0xaf
0000            197   _PCA0CPM5       DATA 0xcc
0000            198   _PCA0H          DATA 0xfa
0000            199   _PCA0L          DATA 0xf9
0000            200   _PCA0MD         DATA 0xd9
0000            201   _PCA0POL        DATA 0x96
0000            202   _PCA0PWM        DATA 0xf7
0000            203   _PCON0          DATA 0x87
0000            204   _PCON1          DATA 0xcd
0000            205   _PFE0CN         DATA 0xc1
0000            206   _PRTDRV         DATA 0xf6
0000            207   _PSCTL          DATA 0x8f
0000            208   _PSTAT0         DATA 0xaa
0000            209   _PSW            DATA 0xd0
0000            210   _REF0CN         DATA 0xd1
0000            211   _REG0CN         DATA 0xc9
0000            212   _REVID          DATA 0xb6
0000            213   _RSTSRC         DATA 0xef
0000            214   _SBCON1         DATA 0x94
0000            215   _SBRLH1         DATA 0x96
0000            216   _SBRLL1         DATA 0x95
0000            217   _SBUF           DATA 0x99
0000            218   _SBUF0          DATA 0x99
0000            219   _SBUF1          DATA 0x92
0000            220   _SCON           DATA 0x98
0000            221   _SCON0          DATA 0x98
0000            222   _SCON1          DATA 0xc8
0000            223   _SFRPAGE        DATA 0xa7
0000            224   _SFRPGCN        DATA 0xbc
0000            225   _SFRSTACK       DATA 0xd7
0000            226   _SMB0ADM        DATA 0xd6
0000            227   _SMB0ADR        DATA 0xd7
0000            228   _SMB0CF         DATA 0xc1
0000            229   _SMB0CN0        DATA 0xc0
0000            230   _SMB0DAT        DATA 0xc2
0000            231   _SMB0FCN0       DATA 0xc3
0000            232   _SMB0FCN1       DATA 0xc4
0000            233   _SMB0FCT        DATA 0xef
0000            234   _SMB0RXLN       DATA 0xc5
0000            235   _SMB0TC         DATA 0xac
0000            236   _SMOD1          DATA 0x93
0000            237   _SP             DATA 0x81
0000            238   _SPI0CFG        DATA 0xa1
0000            239   _SPI0CKR        DATA 0xa2
0000            240   _SPI0CN0        DATA 0xf8
0000            241   _SPI0DAT        DATA 0xa3
0000            242   _SPI0FCN0       DATA 0x9a
0000            243   _SPI0FCN1       DATA 0x9b
0000            244   _SPI0FCT        DATA 0xf7
0000            245   _SPI0PCF        DATA 0xdf
0000            246   _TCON           DATA 0x88
0000            247   _TH0            DATA 0x8c
0000            248   _TH1            DATA 0x8d
0000            249   _TL0            DATA 0x8a
0000            250   _TL1            DATA 0x8b
0000            251   _TMOD           DATA 0x89
0000            252   _TMR2CN0        DATA 0xc8
0000            253   _TMR2CN1        DATA 0xfd
0000            254   _TMR2H          DATA 0xcf
0000            255   _TMR2L          DATA 0xce
0000            256   _TMR2RLH        DATA 0xcb
0000            257   _TMR2RLL        DATA 0xca
0000            258   _TMR3CN0        DATA 0x91
0000            259   _TMR3CN1        DATA 0xfe
0000            260   _TMR3H          DATA 0x95
0000            261   _TMR3L          DATA 0x94
0000            262   _TMR3RLH        DATA 0x93
0000            263   _TMR3RLL        DATA 0x92
0000            264   _TMR4CN0        DATA 0x98
0000            265   _TMR4CN1        DATA 0xff
0000            266   _TMR4H          DATA 0xa5
0000            267   _TMR4L          DATA 0xa4
0000            268   _TMR4RLH        DATA 0xa3
0000            269   _TMR4RLL        DATA 0xa2
0000            270   _TMR5CN0        DATA 0xc0
0000            271   _TMR5CN1        DATA 0xf1
0000            272   _TMR5H          DATA 0xd5
0000            273   _TMR5L          DATA 0xd4
0000            274   _TMR5RLH        DATA 0xd3
0000            275   _TMR5RLL        DATA 0xd2
0000            276   _UART0PCF       DATA 0xd9
0000            277   _UART1FCN0      DATA 0x9d
0000            278   _UART1FCN1      DATA 0xd8
0000            279   _UART1FCT       DATA 0xfa
0000            280   _UART1LIN       DATA 0x9e
0000            281   _UART1PCF       DATA 0xda
0000            282   _VDM0CN         DATA 0xff
0000            283   _WDTCN          DATA 0x97
0000            284   _XBR0           DATA 0xe1
0000            285   _XBR1           DATA 0xe2
0000            286   _XBR2           DATA 0xe3
0000            287   _XOSC0CN        DATA 0x86
0000            288   _DPTR           DATA 0x8382
0000            289   _TMR2RL         DATA 0xcbca
0000            290   _TMR3RL         DATA 0x9392
0000            291   _TMR4RL         DATA 0xa3a2
0000            292   _TMR5RL         DATA 0xd3d2
0000            293   _TMR0           DATA 0x8c8a
0000            294   _TMR1           DATA 0x8d8b
0000            295   _TMR2           DATA 0xcfce
0000            296   _TMR3           DATA 0x9594
0000            297   _TMR4           DATA 0xa5a4
0000            298   _TMR5           DATA 0xd5d4
0000            299   _SBRL1          DATA 0x9695
0000            300   _PCA0           DATA 0xfaf9
0000            301   _PCA0CP0        DATA 0xfcfb
0000            302   _PCA0CP1        DATA 0xeae9
0000            303   _PCA0CP2        DATA 0xeceb
0000            304   _PCA0CP3        DATA 0xf5f4
0000            305   _PCA0CP4        DATA 0x8584
0000            306   _PCA0CP5        DATA 0xdedd
0000            307   _ADC0ASA        DATA 0xb6b5
0000            308   _ADC0GT         DATA 0xc4c3
0000            309   _ADC0           DATA 0xbebd
0000            310   _ADC0LT         DATA 0xc6c5
0000            311   _DAC0           DATA 0x8584
0000            312   _DAC1           DATA 0x8a89
0000            313   _DAC2           DATA 0x8c8b
0000            314   _DAC3           DATA 0x8e8d
0000            315   ;--------------------------------------------------------
0000            316   ; special function bits
0000            317   ;--------------------------------------------------------
0000            318   _ACC_0          BIT 0xe0
0000            319   _ACC_1          BIT 0xe1
0000            320   _ACC_2          BIT 0xe2
0000            321   _ACC_3          BIT 0xe3
0000            322   _ACC_4          BIT 0xe4
0000            323   _ACC_5          BIT 0xe5
0000            324   _ACC_6          BIT 0xe6
0000            325   _ACC_7          BIT 0xe7
0000            326   _TEMPE          BIT 0xe8
0000            327   _ADGN0          BIT 0xe9
0000            328   _ADGN1          BIT 0xea
0000            329   _ADWINT         BIT 0xeb
0000            330   _ADBUSY         BIT 0xec
0000            331   _ADINT          BIT 0xed
0000            332   _IPOEN          BIT 0xee
0000            333   _ADEN           BIT 0xef
0000            334   _B_0            BIT 0xf0
0000            335   _B_1            BIT 0xf1
0000            336   _B_2            BIT 0xf2
0000            337   _B_3            BIT 0xf3
0000            338   _B_4            BIT 0xf4
0000            339   _B_5            BIT 0xf5
0000            340   _B_6            BIT 0xf6
0000            341   _B_7            BIT 0xf7
0000            342   _C0FIF          BIT 0xe8
0000            343   _C0RIF          BIT 0xe9
0000            344   _C1FIF          BIT 0xea
0000            345   _C1RIF          BIT 0xeb
0000            346   _C2FIF          BIT 0xec
0000            347   _C2RIF          BIT 0xed
0000            348   _C3FIF          BIT 0xee
0000            349   _C3RIF          BIT 0xef
0000            350   _D1SRC0         BIT 0x88
0000            351   _D1SRC1         BIT 0x89
0000            352   _D1AMEN         BIT 0x8a
0000            353   _D01REFSL       BIT 0x8b
0000            354   _D3SRC0         BIT 0x8c
0000            355   _D3SRC1         BIT 0x8d
0000            356   _D3AMEN         BIT 0x8e
0000            357   _D23REFSL       BIT 0x8f
0000            358   _D0UDIS         BIT 0x98
0000            359   _D1UDIS         BIT 0x99
0000            360   _D2UDIS         BIT 0x9a
0000            361   _D3UDIS         BIT 0x9b
0000            362   _EX0            BIT 0xa8
0000            363   _ET0            BIT 0xa9
0000            364   _EX1            BIT 0xaa
0000            365   _ET1            BIT 0xab
0000            366   _ES0            BIT 0xac
0000            367   _ET2            BIT 0xad
0000            368   _ESPI0          BIT 0xae
0000            369   _EA             BIT 0xaf
0000            370   _PX0            BIT 0xb8
0000            371   _PT0            BIT 0xb9
0000            372   _PX1            BIT 0xba
0000            373   _PT1            BIT 0xbb
0000            374   _PS0            BIT 0xbc
0000            375   _PT2            BIT 0xbd
0000            376   _PSPI0          BIT 0xbe
0000            377   _P0_0           BIT 0x80
0000            378   _P0_1           BIT 0x81
0000            379   _P0_2           BIT 0x82
0000            380   _P0_3           BIT 0x83
0000            381   _P0_4           BIT 0x84
0000            382   _P0_5           BIT 0x85
0000            383   _P0_6           BIT 0x86
0000            384   _P0_7           BIT 0x87
0000            385   _P1_0           BIT 0x90
0000            386   _P1_1           BIT 0x91
0000            387   _P1_2           BIT 0x92
0000            388   _P1_3           BIT 0x93
0000            389   _P1_4           BIT 0x94
0000            390   _P1_5           BIT 0x95
0000            391   _P1_6           BIT 0x96
0000            392   _P1_7           BIT 0x97
0000            393   _P2_0           BIT 0xa0
0000            394   _P2_1           BIT 0xa1
0000            395   _P2_2           BIT 0xa2
0000            396   _P2_3           BIT 0xa3
0000            397   _P2_4           BIT 0xa4
0000            398   _P2_5           BIT 0xa5
0000            399   _P2_6           BIT 0xa6
0000            400   _P3_0           BIT 0xb0
0000            401   _P3_1           BIT 0xb1
0000            402   _P3_2           BIT 0xb2
0000            403   _P3_3           BIT 0xb3
0000            404   _P3_4           BIT 0xb4
0000            405   _P3_7           BIT 0xb7
0000            406   _CCF0           BIT 0xd8
0000            407   _CCF1           BIT 0xd9
0000            408   _CCF2           BIT 0xda
0000            409   _CCF3           BIT 0xdb
0000            410   _CCF4           BIT 0xdc
0000            411   _CCF5           BIT 0xdd
0000            412   _CR             BIT 0xde
0000            413   _CF             BIT 0xdf
0000            414   _PARITY         BIT 0xd0
0000            415   _F1             BIT 0xd1
0000            416   _OV             BIT 0xd2
0000            417   _RS0            BIT 0xd3
0000            418   _RS1            BIT 0xd4
0000            419   _F0             BIT 0xd5
0000            420   _AC             BIT 0xd6
0000            421   _CY             BIT 0xd7
0000            422   _RI             BIT 0x98
0000            423   _TI             BIT 0x99
0000            424   _RB8            BIT 0x9a
0000            425   _TB8            BIT 0x9b
0000            426   _REN            BIT 0x9c
0000            427   _CE             BIT 0x9d
0000            428   _SMODE          BIT 0x9e
0000            429   _RI1            BIT 0xc8
0000            430   _TI1            BIT 0xc9
0000            431   _RBX1           BIT 0xca
0000            432   _TBX1           BIT 0xcb
0000            433   _REN1           BIT 0xcc
0000            434   _PERR1          BIT 0xcd
0000            435   _OVR1           BIT 0xce
0000            436   _SI             BIT 0xc0
0000            437   _ACK            BIT 0xc1
0000            438   _ARBLOST        BIT 0xc2
0000            439   _ACKRQ          BIT 0xc3
0000            440   _STO            BIT 0xc4
0000            441   _STA            BIT 0xc5
0000            442   _TXMODE         BIT 0xc6
0000            443   _MASTER         BIT 0xc7
0000            444   _SPIEN          BIT 0xf8
0000            445   _TXNF           BIT 0xf9
0000            446   _NSSMD0         BIT 0xfa
0000            447   _NSSMD1         BIT 0xfb
0000            448   _RXOVRN         BIT 0xfc
0000            449   _MODF           BIT 0xfd
0000            450   _WCOL           BIT 0xfe
0000            451   _SPIF           BIT 0xff
0000            452   _IT0            BIT 0x88
0000            453   _IE0            BIT 0x89
0000            454   _IT1            BIT 0x8a
0000            455   _IE1            BIT 0x8b
0000            456   _TR0            BIT 0x8c
0000            457   _TF0            BIT 0x8d
0000            458   _TR1            BIT 0x8e
0000            459   _TF1            BIT 0x8f
0000            460   _T2XCLK0        BIT 0xc8
0000            461   _T2XCLK1        BIT 0xc9
0000            462   _TR2            BIT 0xca
0000            463   _T2SPLIT        BIT 0xcb
0000            464   _TF2CEN         BIT 0xcc
0000            465   _TF2LEN         BIT 0xcd
0000            466   _TF2L           BIT 0xce
0000            467   _TF2H           BIT 0xcf
0000            468   _T4XCLK0        BIT 0x98
0000            469   _T4XCLK1        BIT 0x99
0000            470   _TR4            BIT 0x9a
0000            471   _T4SPLIT        BIT 0x9b
0000            472   _TF4CEN         BIT 0x9c
0000            473   _TF4LEN         BIT 0x9d
0000            474   _TF4L           BIT 0x9e
0000            475   _TF4H           BIT 0x9f
0000            476   _T5XCLK0        BIT 0xc0
0000            477   _T5XCLK1        BIT 0xc1
0000            478   _TR5            BIT 0xc2
0000            479   _T5SPLIT        BIT 0xc3
0000            480   _TF5CEN         BIT 0xc4
0000            481   _TF5LEN         BIT 0xc5
0000            482   _TF5L           BIT 0xc6
0000            483   _TF5H           BIT 0xc7
0000            484   _RIE            BIT 0xd8
0000            485   _RXTO0          BIT 0xd9
0000            486   _RXTO1          BIT 0xda
0000            487   _RFRQ           BIT 0xdb
0000            488   _TIE            BIT 0xdc
0000            489   _TXHOLD         BIT 0xdd
0000            490   _TXNF1          BIT 0xde
0000            491   _TFRQ           BIT 0xdf
0000            492   ;--------------------------------------------------------
0000            493   ; overlayable register banks
0000            494   ;--------------------------------------------------------
0000            495            rbank0 segment data overlay
0000            496   ;--------------------------------------------------------
0000            497   ; internal ram data
0000            498   ;--------------------------------------------------------
0000            499            rseg R_DSEG
0000            500   _adcFlag:
0000            501            ds 1
0001            502   _direction:
0001            503            ds 1
0002            504   _moveStepperFlag:
0002            505            ds 1
0003            506   _stepsCW:
0003            507            ds 1
0004            508   _stepsCCW:
0004            509            ds 1
0005            510   _delayFlag:
0005            511            ds 1
0006            512   _stepNumber:
0006            513            ds 1
0007            514   _interruptCount:
0007            515            ds 1
0008            516   _totalSteps:
0008            517            ds 2
000A            518   _windAngle:
000A            519            ds 4
000E            520   _spiByteNum:
000E            521            ds 2
0010            522   _spiBytes:
0010            523            ds 20
0024            524   _main_vReadings_1_90:
0024            525            ds 8
002C            526   _main_voltages_1_90:
002C            527            ds 8
0034            528   _main_measureCount_1_90:
0034            529            ds 2
0036            530   _main_sloc0_1_0:
0036            531            ds 4
003A            532   ;--------------------------------------------------------
003A            533   ; overlayable items in internal ram 
003A            534   ;--------------------------------------------------------
0000            535            rseg    R_OSEG
0000            536            rseg    R_OSEG
0000            537            rseg    R_OSEG
0000            538   ;--------------------------------------------------------
0000            539   ; indirectly addressable internal ram data
0000            540   ;--------------------------------------------------------
0000            541            rseg R_ISEG
0000            542   ;--------------------------------------------------------
0000            543   ; absolute internal ram data
0000            544   ;--------------------------------------------------------
0000            545            DSEG
0000            546   ;--------------------------------------------------------
0000            547   ; bit data
0000            548   ;--------------------------------------------------------
0000            549            rseg R_BSEG
0000            550   ;--------------------------------------------------------
0000            551   ; paged external ram data
0000            552   ;--------------------------------------------------------
0000            553            rseg R_PSEG
0000            554   ;--------------------------------------------------------
0000            555   ; external ram data
0000            556   ;--------------------------------------------------------
0000            557            rseg R_XSEG
0000            558   ;--------------------------------------------------------
0000            559   ; absolute external ram data
0000            560   ;--------------------------------------------------------
0000            561            XSEG
0000            562   ;--------------------------------------------------------
0000            563   ; external initialized ram data
0000            564   ;--------------------------------------------------------
0000            565            rseg R_IXSEG
0000            566            rseg R_HOME
0000            567            rseg R_GSINIT
0000            568            rseg R_CSEG
0000            569   ;--------------------------------------------------------
0000            570   ; Reset entry point and interrupt vectors
0000            571   ;--------------------------------------------------------
0000            572            CSEG at 0x0000
0000 020100     573            ljmp    _crt0
002B            574            CSEG at 0x002b
002B 020100     575            ljmp    _Timer2_ISR
0073            576            CSEG at 0x0073
0073 020100     577            ljmp    _Timer3_ISR
0076            578   ;--------------------------------------------------------
0076            579   ; global & static initialisations
0076            580   ;--------------------------------------------------------
0000            581            rseg R_HOME
0000            582            rseg R_GSINIT
0000            583            rseg R_GSINIT
0000            584   ;--------------------------------------------------------
0000            585   ; data variables initialization
0000            586   ;--------------------------------------------------------
0000            587            rseg R_DINIT
0000            588   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:51: volatile unsigned char adcFlag = 1;
0000 753001     589            mov     _adcFlag,#0x01
0003            590   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:54: volatile unsigned char direction = 1;
0003 75F001     591            mov     _direction,#0x01
0006            592   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:55: volatile unsigned char moveStepperFlag = 0;
0006 75B000     593            mov     _moveStepperFlag,#0x00
0009            594   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:57: volatile unsigned char stepsCW = 0;
0009 756000     595            mov     _stepsCW,#0x00
000C            596   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:58: volatile unsigned char stepsCCW = 0;
000C 752000     597            mov     _stepsCCW,#0x00
000F            598   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:62: volatile unsigned char delayFlag = 0;
000F 75E000     599            mov     _delayFlag,#0x00
0012            600   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:65: volatile unsigned char stepNumber = 0;
0012 75A000     601            mov     _stepNumber,#0x00
0015            602   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:66: volatile unsigned char interruptCount = 0;
0015 757800     603            mov     _interruptCount,#0x00
0018            604   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:69: int totalSteps = 0;
0018 E4         605            clr     a
0019 F558       606            mov     _totalSteps,a
001B F559       607            mov     (_totalSteps + 1),a
001D            608   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:72: float windAngle = 0;  
001D 751800     609            mov     _windAngle,#0x00
0020 751900     610            mov     (_windAngle + 1),#0x00
0023 751A00     611            mov     (_windAngle + 2),#0x00
0026 751B00     612            mov     (_windAngle + 3),#0x00
0029            613            ; The linker places a 'ret' at the end of segment R_DINIT.
0029            614   ;--------------------------------------------------------
0029            615   ; code
0029            616   ;--------------------------------------------------------
0000            617            rseg R_CSEG
0000            618   ;------------------------------------------------------------
0000            619   ;Allocation info for local variables in function '_c51_external_startup'
0000            620   ;------------------------------------------------------------
0000            621   ;------------------------------------------------------------
0000            622   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:78: char _c51_external_startup (void)
0000            623   ;        -----------------------------------------
0000            624   ;         function _c51_external_startup
0000            625   ;        -----------------------------------------
0000            626   __c51_external_startup:
0000            627            using   0
0000            628   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:81: SFRPAGE = 0x00;
0000 75A700     629            mov     _SFRPAGE,#0x00
0003            630   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:82: WDTCN = 0xDE; //First key
0003 7597DE     631            mov     _WDTCN,#0xDE
0006            632   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:83: WDTCN = 0xAD; //Second key
0006 7597AD     633            mov     _WDTCN,#0xAD
0009            634   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:85: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     635            mov     _VDM0CN,#0x80
000C            636   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:86: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     637            mov     _RSTSRC,#0x06
000F            638   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:93: SFRPAGE = 0x10;
000F 75A710     639            mov     _SFRPAGE,#0x10
0012            640   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:94: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     641            mov     _PFE0CN,#0x20
0015            642   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:95: SFRPAGE = 0x00;
0015 75A700     643            mov     _SFRPAGE,#0x00
0018            644   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:116: CLKSEL = 0x00;
0018 75A900     645            mov     _CLKSEL,#0x00
001B            646   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:117: CLKSEL = 0x00;
001B 75A900     647            mov     _CLKSEL,#0x00
001E            648   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:118: while ((CLKSEL & 0x80) == 0);
001E            649   L002001?:
001E E5A9       650            mov     a,_CLKSEL
0020 30E7A0     651            jnb     acc.7,L002001?
0023            652   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:119: CLKSEL = 0x03;
0023 75A903     653            mov     _CLKSEL,#0x03
0026            654   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:120: CLKSEL = 0x03;
0026 75A903     655            mov     _CLKSEL,#0x03
0029            656   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:121: while ((CLKSEL & 0x80) == 0);
0029            657   L002004?:
0029 E5A9       658            mov     a,_CLKSEL
002B 30E720     659            jnb     acc.7,L002004?
002E            660   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:126: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     661            orl     _P0MDOUT,#0x10
0031            662   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:128: P0SKIP |= 0b_1100_1111; //Skip all P0 bits except bits 4 and 5 (UART0)
0031 43D4CF     663            orl     _P0SKIP,#0xCF
0034            664   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:134: P1SKIP |= 0b_0000_1111;
0034 43D50F     665            orl     _P1SKIP,#0x0F
0037            666   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:137: XBR0     = 0x03; // Enable SPI0 and UART0 on P0.4(TX) and P0.5(RX)  
0037 75E103     667            mov     _XBR0,#0x03
003A            668   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:139: XBR1     = 0x01; //Enable PCA I/O and route CEX0 only (check reference manual page 120)
003A 75E201     669            mov     _XBR1,#0x01
003D            670   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:141: XBR2     = 0x40; // Enable crossbar and weak pull-ups
003D 75E340     671            mov     _XBR2,#0x40
0040            672   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:147: SCON0 = 0x10;
0040 759810     673            mov     _SCON0,#0x10
0043            674   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:148: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0043 758DE6     675            mov     _TH1,#0xE6
0046            676   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:149: TL1 = TH1;      // Init Timer1
0046 858D8B     677            mov     _TL1,_TH1
0049            678   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:150: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0049 53890F     679            anl     _TMOD,#0x0F
004C            680   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:151: TMOD |=  0x20;                       
004C 438920     681            orl     _TMOD,#0x20
004F            682   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:152: TR1 = 1; // START Timer1
004F D28E       683            setb    _TR1
0051            684   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:153: TI = 1;  // Indicate TX0 ready
0051 D299       685            setb    _TI
0053            686   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:156: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
0053 75A2FC     687            mov     _SPI0CKR,#0xFC
0056            688   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:157: SPI0CFG = 0b_0110_0000; //SPI in master mode (CKPHA = 1, CKPOL = 0)
0056 75A160     689            mov     _SPI0CFG,#0x60
0059            690   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:158: SPI0CN0 = 0b_0000_0001; //SPI enabled and in 3 wire master mode
0059 75F801     691            mov     _SPI0CN0,#0x01
005C            692   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:161: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
005C 75C800     693            mov     _TMR2CN0,#0x00
005F            694   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:162: CKCON0|=0b_0001_0000; // Timer 2 uses the system clock
005F 438E10     695            orl     _CKCON0,#0x10
0062            696   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:163: TMR2RL=(0x10000L-(SYSCLK/(2*TIMER_2_FREQ))); // Initialize reload value
0062 75CA60     697            mov     _TMR2RL,#0x60
0065 75CB73     698            mov     (_TMR2RL >> 8),#0x73
0068            699   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:164: TMR2=0xffff;   // Set to reload immediately
0068 75CEFF     700            mov     _TMR2,#0xFF
006B 75CFFF     701            mov     (_TMR2 >> 8),#0xFF
006E            702   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:165: ET2=1;         // Enable Timer2 interrupts
006E D2AD       703            setb    _ET2
0070            704   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:166: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
0070 D2CA       705            setb    _TR2
0072            706   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:169: TMR3CN0=0x00;   // Stop Timer3; Clear TF3;
0072 759100     707            mov     _TMR3CN0,#0x00
0075            708   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:170: CKCON0|=0b_0100_0000; // Timer 3 uses the system clock
0075 438E40     709            orl     _CKCON0,#0x40
0078            710   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:171: TMR3RL=(0x10000L-(SYSCLK/(2*TIMER_3_FREQ))); // Initialize reload value
0078 7592DC     711            mov     _TMR3RL,#0xDC
007B 7593FF     712            mov     (_TMR3RL >> 8),#0xFF
007E            713   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:172: TMR3=0xffff;   // Set to reload immediately
007E 7594FF     714            mov     _TMR3,#0xFF
0081 7595FF     715            mov     (_TMR3 >> 8),#0xFF
0084            716   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:173: EIE1|=0b_1000_0000;     // Enable Timer3 interrupts
0084 43E680     717            orl     _EIE1,#0x80
0087            718   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:174: TMR3CN0|=0b_0000_0100;  // Start Timer3 (TMR3CN0 is not bit addressable)
0087 439104     719            orl     _TMR3CN0,#0x04
008A            720   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:176: EA=1; // Enable interrupts
008A D2AF       721            setb    _EA
008C            722   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:178: return 0;
008C 758200     723            mov     dpl,#0x00
008F 22         724            ret
0090            725   ;------------------------------------------------------------
0090            726   ;Allocation info for local variables in function 'Timer2_ISR'
0090            727   ;------------------------------------------------------------
0090            728   ;------------------------------------------------------------
0090            729   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:183: void Timer2_ISR (void) interrupt INTERRUPT_TIMER2
0090            730   ;        -----------------------------------------
0090            731   ;         function Timer2_ISR
0090            732   ;        -----------------------------------------
0090            733   _Timer2_ISR:
0090 C0E0       734            push    acc
0092 C0D0       735            push    psw
0094 75D000     736            mov     psw,#0x00
0097            737   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:185: SFRPAGE=0x0;
0097 75A700     738            mov     _SFRPAGE,#0x00
009A            739   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:186: TF2H = 0; // Clear Timer2 interrupt flag
009A C2CF       740            clr     _TF2H
009C            741   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:191: if(moveStepperFlag == 1) //If rotation is enabled
009C 7401       742            mov     a,#0x01
009E B5B0E0     743            cjne    a,_moveStepperFlag,L003047?
00A1 8001       744            sjmp    L003048?
00A3            745   L003047?:
00A3 020100     746            ljmp    L003033?
00A6            747   L003048?:
00A6            748   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:193: if(interruptCount == 4) //Check if timing constraint for the stepper motor coils is met
00A6 7404       749            mov     a,#0x04
00A8 B578A0     750            cjne    a,_interruptCount,L003049?
00AB 8001       751            sjmp    L003050?
00AD            752   L003049?:
00AD 020100     753            ljmp    L003029?
00B0            754   L003050?:
00B0            755   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:195: interruptCount = 0; //Reset the interrupt counter
00B0 757800     756            mov     _interruptCount,#0x00
00B3            757   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:196: if(direction == 1) //Check for clockwise movement direction
00B3 7401       758            mov     a,#0x01
00B5 B5F060     759            cjne    a,_direction,L003024?
00B8            760   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:198: if(stepsCW != 0) 
00B8 E560       761            mov     a,_stepsCW
00BA 7001       762            jnz     L003053?
00BC 020100     763            ljmp    L003025?
00BF            764   L003053?:
00BF            765   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:200: if(stepNumber == 0)
00BF E5A0       766            mov     a,_stepNumber
00C1 7001       767            jnz     L003008?
00C3            768   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:202: PORT1 = 1;
00C3 D2A1       769            setb    _P2_1
00C5            770   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:203: PORT2 = 1;
00C5 D2A2       771            setb    _P2_2
00C7            772   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:204: PORT3 = 0;
00C7 C2A3       773            clr     _P2_3
00C9            774   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:205: PORT4 = 0;
00C9 C2A4       775            clr     _P2_4
00CB 8001       776            sjmp    L003025?
00CD            777   L003008?:
00CD            778   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:207: else if(stepNumber == 1)
00CD 7401       779            mov     a,#0x01
00CF B5A060     780            cjne    a,_stepNumber,L003005?
00D2            781   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:209: PORT1 = 0;
00D2 C2A1       782            clr     _P2_1
00D4            783   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:210: PORT2 = 1;
00D4 D2A2       784            setb    _P2_2
00D6            785   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:211: PORT3 = 1;
00D6 D2A3       786            setb    _P2_3
00D8            787   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:212: PORT4 = 0;
00D8 C2A4       788            clr     _P2_4
00DA 8001       789            sjmp    L003025?
00DC            790   L003005?:
00DC            791   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:214: else if(stepNumber == 2)
00DC 7402       792            mov     a,#0x02
00DE B5A0A0     793            cjne    a,_stepNumber,L003002?
00E1            794   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:216: PORT1 = 0;
00E1 C2A1       795            clr     _P2_1
00E3            796   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:217: PORT2 = 0;
00E3 C2A2       797            clr     _P2_2
00E5            798   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:218: PORT3 = 1;
00E5 D2A3       799            setb    _P2_3
00E7            800   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:219: PORT4 = 1;
00E7 D2A4       801            setb    _P2_4
00E9 8001       802            sjmp    L003025?
00EB            803   L003002?:
00EB            804   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:223: PORT1 = 1;
00EB D2A1       805            setb    _P2_1
00ED            806   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:224: PORT2 = 0;
00ED C2A2       807            clr     _P2_2
00EF            808   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:225: PORT3 = 0;
00EF C2A3       809            clr     _P2_3
00F1            810   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:226: PORT4 = 1;
00F1 D2A4       811            setb    _P2_4
00F3 8001       812            sjmp    L003025?
00F5            813   L003024?:
00F5            814   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:232: if(stepsCCW != 0)
00F5 E520       815            mov     a,_stepsCCW
00F7 6001       816            jz      L003025?
00F9            817   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:234: if(stepNumber == 0)
00F9 E5A0       818            mov     a,_stepNumber
00FB 7001       819            jnz     L003019?
00FD            820   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:236: PORT1 = 1;
00FD D2A1       821            setb    _P2_1
00FF            822   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:237: PORT2 = 0;
00FF C2A2       823            clr     _P2_2
0101            824   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:238: PORT3 = 0;
0101 C2A3       825            clr     _P2_3
0103            826   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:239: PORT4 = 1;
0103 D2A4       827            setb    _P2_4
0105 8001       828            sjmp    L003025?
0107            829   L003019?:
0107            830   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:241: else if(stepNumber == 1)
0107 7401       831            mov     a,#0x01
0109 B5A028     832            cjne    a,_stepNumber,L003016?
010C            833   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:243: PORT1 = 0;
010C C2A1       834            clr     _P2_1
010E            835   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:244: PORT2 = 0;
010E C2A2       836            clr     _P2_2
0110            837   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:245: PORT3 = 1;
0110 D2A3       838            setb    _P2_3
0112            839   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:246: PORT4 = 1;
0112 D2A4       840            setb    _P2_4
0114 8001       841            sjmp    L003025?
0116            842   L003016?:
0116            843   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:248: else if(stepNumber == 2)
0116 7402       844            mov     a,#0x02
0118 B5A068     845            cjne    a,_stepNumber,L003013?
011B            846   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:250: PORT1 = 0;
011B C2A1       847            clr     _P2_1
011D            848   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:251: PORT2 = 1;
011D D2A2       849            setb    _P2_2
011F            850   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:252: PORT3 = 1;
011F D2A3       851            setb    _P2_3
0121            852   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:253: PORT4 = 0;
0121 C2A4       853            clr     _P2_4
0123 8001       854            sjmp    L003025?
0125            855   L003013?:
0125            856   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:257: PORT1 = 1;
0125 D2A1       857            setb    _P2_1
0127            858   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:258: PORT2 = 1;
0127 D2A2       859            setb    _P2_2
0129            860   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:259: PORT3 = 0;
0129 C2A3       861            clr     _P2_3
012B            862   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:260: PORT4 = 1;
012B D2A4       863            setb    _P2_4
012D            864   L003025?:
012D            865   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:266: stepNumber++;
012D 05A0       866            inc     _stepNumber
012F            867   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:267: totalSteps++;
012F 0558       868            inc     _totalSteps
0131 E4         869            clr     a
0132 B558A8     870            cjne    a,_totalSteps,L003065?
0135 0559       871            inc     (_totalSteps + 1)
0137            872   L003065?:
0137            873   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:268: if(stepNumber > 3)
0137 E5A0       874            mov     a,_stepNumber
0139 24FC       875            add     a,#0xff - 0x03
013B 5001       876            jnc     L003033?
013D            877   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:269: stepNumber = 0;
013D 75A000     878            mov     _stepNumber,#0x00
0140 8001       879            sjmp    L003033?
0142            880   L003029?:
0142            881   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:272: interruptCount++;
0142 0578       882            inc     _interruptCount
0144            883   L003033?:
0144 D0D0       884            pop     psw
0146 D0E0       885            pop     acc
0148 32         886            reti
0149            887   ;        eliminated unneeded push/pop dpl
0149            888   ;        eliminated unneeded push/pop dph
0149            889   ;        eliminated unneeded push/pop b
0149            890   ;------------------------------------------------------------
0149            891   ;Allocation info for local variables in function 'Timer3_ISR'
0149            892   ;------------------------------------------------------------
0149            893   ;------------------------------------------------------------
0149            894   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:278: void Timer3_ISR (void) interrupt INTERRUPT_TIMER3
0149            895   ;        -----------------------------------------
0149            896   ;         function Timer3_ISR
0149            897   ;        -----------------------------------------
0149            898   _Timer3_ISR:
0149            899   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:280: SFRPAGE=0x0;
0149 75A700     900            mov     _SFRPAGE,#0x00
014C            901   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:281: TMR3CN0&=0b_0011_1111; // Clear Timer3 interrupt flags
014C 53913F     902            anl     _TMR3CN0,#0x3F
014F            903   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:283: adcFlag = 1;
014F 753001     904            mov     _adcFlag,#0x01
0152            905   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:284: delayFlag = 1;
0152 75E001     906            mov     _delayFlag,#0x01
0155 32         907            reti
0156            908   ;        eliminated unneeded push/pop psw
0156            909   ;        eliminated unneeded push/pop dpl
0156            910   ;        eliminated unneeded push/pop dph
0156            911   ;        eliminated unneeded push/pop b
0156            912   ;        eliminated unneeded push/pop acc
0156            913   ;------------------------------------------------------------
0156            914   ;Allocation info for local variables in function 'delay_us'
0156            915   ;------------------------------------------------------------
0156            916   ;us                        Allocated to registers r2 r3 
0156            917   ;countus                   Allocated to registers r4 r5 
0156            918   ;------------------------------------------------------------
0156            919   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:291: void delay_us(int us)
0156            920   ;        -----------------------------------------
0156            921   ;         function delay_us
0156            922   ;        -----------------------------------------
0156            923   _delay_us:
0156 AA82       924            mov     r2,dpl
0158 AB83       925            mov     r3,dph
015A            926   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:295: delayFlag = 0;
015A 75E000     927            mov     _delayFlag,#0x00
015D            928   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:297: while(countus < us)
015D 7C00       929            mov     r4,#0x00
015F 7D00       930            mov     r5,#0x00
0161            931   L005003?:
0161 C3         932            clr     c
0162 EC         933            mov     a,r4
0163 9A         934            subb    a,r2
0164 ED         935            mov     a,r5
0165 6480       936            xrl     a,#0x80
0167 8BF0       937            mov     b,r3
0169 63F080     938            xrl     b,#0x80
016C 95F0       939            subb    a,b
016E 5001       940            jnc     L005006?
0170            941   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:299: if(delayFlag == 1)
0170 7401       942            mov     a,#0x01
0172 B5E028     943            cjne    a,_delayFlag,L005003?
0175            944   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:301: delayFlag = 0;
0175 75E000     945            mov     _delayFlag,#0x00
0178            946   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:302: countus++;
0178 0C         947            inc     r4
0179 BC0028     948            cjne    r4,#0x00,L005003?
017C 0D         949            inc     r5
017D 8001       950            sjmp    L005003?
017F            951   L005006?:
017F 22         952            ret
0180            953   ;------------------------------------------------------------
0180            954   ;Allocation info for local variables in function 'InitADC'
0180            955   ;------------------------------------------------------------
0180            956   ;------------------------------------------------------------
0180            957   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:311: void InitADC (void)
0180            958   ;        -----------------------------------------
0180            959   ;         function InitADC
0180            960   ;        -----------------------------------------
0180            961   _InitADC:
0180            962   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:313: SFRPAGE = 0x00;
0180 75A700     963            mov     _SFRPAGE,#0x00
0183            964   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:314: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0183 75B280     965            mov     _ADC0CN1,#0x80
0186            966   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:315: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
0186 75BCF8     967            mov     _ADC0CF0,#0xF8
0189            968   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:316: ADC0CF1 = 0b_0_0_011110; // Same as default for now
0189 75B91E     969            mov     _ADC0CF1,#0x1E
018C            970   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:317: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
018C 75E800     971            mov     _ADC0CN0,#0x00
018F            972   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:318: ADC0CF2 = 0b_0_01_11111 ; // GND pin, Vref=VDD
018F 75DF3F     973            mov     _ADC0CF2,#0x3F
0192            974   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:319: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
0192 75B300     975            mov     _ADC0CN2,#0x00
0195            976   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:320: ADEN=1; // Enable ADC
0195 D2EF       977            setb    _ADEN
0197 22         978            ret
0198            979   ;------------------------------------------------------------
0198            980   ;Allocation info for local variables in function 'ADC_at_Pin'
0198            981   ;------------------------------------------------------------
0198            982   ;pin                       Allocated to registers 
0198            983   ;------------------------------------------------------------
0198            984   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:326: unsigned int ADC_at_Pin(unsigned char pin)
0198            985   ;        -----------------------------------------
0198            986   ;         function ADC_at_Pin
0198            987   ;        -----------------------------------------
0198            988   _ADC_at_Pin:
0198 8582BB     989            mov     _ADC0MX,dpl
019B            990   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:329: ADBUSY=1;       // Dummy conversion first to select new pin
019B D2EC       991            setb    _ADBUSY
019D            992   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:330: while (ADBUSY); // Wait for dummy conversion to finish
019D            993   L007001?:
019D 20ECE8     994            jb      _ADBUSY,L007001?
01A0            995   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:331: ADBUSY = 1;     // Convert voltage at the pin
01A0 D2EC       996            setb    _ADBUSY
01A2            997   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:332: while (ADBUSY); // Wait for conversion to complete
01A2            998   L007004?:
01A2 20EC28     999            jb      _ADBUSY,L007004?
01A5           1000   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:333: return (ADC0);
01A5 85BD82    1001            mov     dpl,_ADC0
01A8 85BE83    1002            mov     dph,(_ADC0 >> 8)
01AB 22        1003            ret
01AC           1004   ;------------------------------------------------------------
01AC           1005   ;Allocation info for local variables in function 'Volts_at_Pin'
01AC           1006   ;------------------------------------------------------------
01AC           1007   ;pin                       Allocated to registers r2 
01AC           1008   ;------------------------------------------------------------
01AC           1009   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:340: float Volts_at_Pin(unsigned char pin)
01AC           1010   ;        -----------------------------------------
01AC           1011   ;         function Volts_at_Pin
01AC           1012   ;        -----------------------------------------
01AC           1013   _Volts_at_Pin:
01AC           1014   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:342: return ((ADC_at_Pin(pin)*VDD)/16383.0);
01AC 120100    1015            lcall   _ADC_at_Pin
01AF 120100    1016            lcall   ___uint2fs
01B2 AA82      1017            mov     r2,dpl
01B4 AB83      1018            mov     r3,dph
01B6 ACF0      1019            mov     r4,b
01B8 FD        1020            mov     r5,a
01B9 C002      1021            push    ar2
01BB C003      1022            push    ar3
01BD C004      1023            push    ar4
01BF C005      1024            push    ar5
01C1 909FBE    1025            mov     dptr,#0x9FBE
01C4 75F052    1026            mov     b,#0x52
01C7 7440      1027            mov     a,#0x40
01C9 120100    1028            lcall   ___fsmul
01CC AA82      1029            mov     r2,dpl
01CE AB83      1030            mov     r3,dph
01D0 ACF0      1031            mov     r4,b
01D2 FD        1032            mov     r5,a
01D3 E581      1033            mov     a,sp
01D5 24FC      1034            add     a,#0xfc
01D7 F581      1035            mov     sp,a
01D9 E4        1036            clr     a
01DA C0E0      1037            push    acc
01DC 74FC      1038            mov     a,#0xFC
01DE C0E0      1039            push    acc
01E0 747F      1040            mov     a,#0x7F
01E2 C0E0      1041            push    acc
01E4 7446      1042            mov     a,#0x46
01E6 C0E0      1043            push    acc
01E8 8A82      1044            mov     dpl,r2
01EA 8B83      1045            mov     dph,r3
01EC 8CF0      1046            mov     b,r4
01EE ED        1047            mov     a,r5
01EF 120100    1048            lcall   ___fsdiv
01F2 AA82      1049            mov     r2,dpl
01F4 AB83      1050            mov     r3,dph
01F6 ACF0      1051            mov     r4,b
01F8 FD        1052            mov     r5,a
01F9 E581      1053            mov     a,sp
01FB 24FC      1054            add     a,#0xfc
01FD F581      1055            mov     sp,a
01FF 8A82      1056            mov     dpl,r2
0201 8B83      1057            mov     dph,r3
0203 8CF0      1058            mov     b,r4
0205 ED        1059            mov     a,r5
0206 22        1060            ret
0207           1061   ;------------------------------------------------------------
0207           1062   ;Allocation info for local variables in function 'ConfigPCA0'
0207           1063   ;------------------------------------------------------------
0207           1064   ;------------------------------------------------------------
0207           1065   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:349: void ConfigPCA0()
0207           1066   ;        -----------------------------------------
0207           1067   ;         function ConfigPCA0
0207           1068   ;        -----------------------------------------
0207           1069   _ConfigPCA0:
0207           1070   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:351: SFRPAGE = 0x00; //Navigate to SFR page for register write
0207 75A700    1071            mov     _SFRPAGE,#0x00
020A           1072   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:353: PCA0POL = 0b_0000_0000; //Set the output polarity for all channels to default (no inversion)
020A 759600    1073            mov     _PCA0POL,#0x00
020D           1074   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:355: PCA0MD = 0b_0000_0000; //Set PCA mode to operate even in idle mode with SYSCLK/12
020D 75D900    1075            mov     _PCA0MD,#0x00
0210           1076   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:356: PCA0PWM = 0b_0000_0000;        //Enable 8-bit PWM with no overflow flag set and no interrupts enabled
0210 75F700    1077            mov     _PCA0PWM,#0x00
0213           1078   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:357: PCA0CLR = 0b_0000_0000; //Disable comparator clear for all modules
0213 759C00    1079            mov     _PCA0CLR,#0x00
0216           1080   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:358: PCA0CENT = 0b_00_000000; //Set all modules to edge aligned mode (bits 6 and 7 are reserved and must be 00)
0216 759E00    1081            mov     _PCA0CENT,#0x00
0219           1082   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:360: PCA0CN0 = 0b_0100_0000; //Start the PCA counter/timer (CR bit)         
0219 75D840    1083            mov     _PCA0CN0,#0x40
021C           1084   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:363: PCA0CPM0 = 0b_0100_0010;//Configure Channel 0 to function in 8-bit PWM mode
021C 75DA42    1085            mov     _PCA0CPM0,#0x42
021F           1086   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:364: PCA0CPH0 = 77; //Load the PCA0CP0 high byte 
021F 75FC4D    1087            mov     _PCA0CPH0,#0x4D
0222 22        1088            ret
0223           1089   ;------------------------------------------------------------
0223           1090   ;Allocation info for local variables in function 'ConfigurePins'
0223           1091   ;------------------------------------------------------------
0223           1092   ;------------------------------------------------------------
0223           1093   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:371: void ConfigurePins()
0223           1094   ;        -----------------------------------------
0223           1095   ;         function ConfigurePins
0223           1096   ;        -----------------------------------------
0223           1097   _ConfigurePins:
0223           1098   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:373: SFRPAGE = 0x20;
0223 75A720    1099            mov     _SFRPAGE,#0x20
0226           1100   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:375: P0MDIN &= 0b_1111_1011; //Set P0 bit 2 to analog input for ADC
0226 53F1FB    1101            anl     _P0MDIN,#0xFB
0229           1102   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:376: P1MDIN &= 0b_1111_0111; //Set P1 bit 3 to analog input for ADC
0229 53F2F7    1103            anl     _P1MDIN,#0xF7
022C           1104   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:388: P1MDOUT |= 0b_1101_0000; 
022C 43A5D0    1105            orl     _P1MDOUT,#0xD0
022F           1106   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:389: P2MDOUT |= 0b_0111_1111; 
022F 43A67F    1107            orl     _P2MDOUT,#0x7F
0232           1108   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:392: SFRPAGE = 0x00;        
0232 75A700    1109            mov     _SFRPAGE,#0x00
0235 22        1110            ret
0236           1111   ;------------------------------------------------------------
0236           1112   ;Allocation info for local variables in function 'SPIWrite'
0236           1113   ;------------------------------------------------------------
0236           1114   ;transfer                  Allocated to registers 
0236           1115   ;------------------------------------------------------------
0236           1116   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:399: void SPIWrite (unsigned char transfer)
0236           1117   ;        -----------------------------------------
0236           1118   ;         function SPIWrite
0236           1119   ;        -----------------------------------------
0236           1120   _SPIWrite:
0236 8582A3    1121            mov     _SPI0DAT,dpl
0239           1122   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:402: while(!SPIF); //Wait for the transaction to be finished
0239           1123   L011001?:
0239           1124   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:403: SPIF = 0; //Set the SPI flag back to 0 for next transaction
0239 10FFA8    1125            jbc     _SPIF,L011008?
023C 8001      1126            sjmp    L011001?
023E           1127   L011008?:
023E 22        1128            ret
023F           1129   ;------------------------------------------------------------
023F           1130   ;Allocation info for local variables in function 'wsReadByte'
023F           1131   ;------------------------------------------------------------
023F           1132   ;tempNormal                Allocated to registers r2 r3 r4 r5 
023F           1133   ;------------------------------------------------------------
023F           1134   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:410: void wsReadByte() 
023F           1135   ;        -----------------------------------------
023F           1136   ;         function wsReadByte
023F           1137   ;        -----------------------------------------
023F           1138   _wsReadByte:
023F           1139   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:415: if(spiByteNum < 2)
023F C3        1140            clr     c
0240 E5D8      1141            mov     a,_spiByteNum
0242 9402      1142            subb    a,#0x02
0244 E5D9      1143            mov     a,(_spiByteNum + 1)
0246 9400      1144            subb    a,#0x00
0248 5001      1145            jnc     L012010?
024A           1146   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:417: if(spiByteNum == 0) //First start byte
024A E5D8      1147            mov     a,_spiByteNum
024C 45D9      1148            orl     a,(_spiByteNum + 1)
024E 7001      1149            jnz     L012002?
0250           1150   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:419: MASTER_SS = 0; //Select the wind sensor
0250 C2A0      1151            clr     _P2_0
0252           1152   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:420: delay_us(7); //Wait at least 6.9us before writing the start byte
0252 900007    1153            mov     dptr,#0x0007
0255 120100    1154            lcall   _delay_us
0258           1155   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:422: SPIWrite(0xAA); //Write the start byte to the sensor and store the incoming byte 
0258 7582AA    1156            mov     dpl,#0xAA
025B 120100    1157            lcall   _SPIWrite
025E           1158   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:423: spiBytes[spiByteNum] = SPI0DAT;
025E E5D8      1159            mov     a,_spiByteNum
0260 25D8      1160            add     a,_spiByteNum
0262 FA        1161            mov     r2,a
0263 E5D9      1162            mov     a,(_spiByteNum + 1)
0265 33        1163            rlc     a
0266 EA        1164            mov     a,r2
0267 2498      1165            add     a,#_spiBytes
0269 F8        1166            mov     r0,a
026A AAA3      1167            mov     r2,_SPI0DAT
026C 7B00      1168            mov     r3,#0x00
026E A602      1169            mov     @r0,ar2
0270 08        1170            inc     r0
0271 A603      1171            mov     @r0,ar3
0273           1172   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:424: spiByteNum++;
0273 05D8      1173            inc     _spiByteNum
0275 E4        1174            clr     a
0276 B5D868    1175            cjne    a,_spiByteNum,L012020?
0279 05D9      1176            inc     (_spiByteNum + 1)
027B           1177   L012020?:
027B           1178   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:426: delay_us(40); //Time to wait between bytes
027B 900028    1179            mov     dptr,#0x0028
027E 020100    1180            ljmp    _delay_us
0281           1181   L012002?:
0281           1182   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:431: SPIWrite(0xFF); //Write the start byte to the sensor and store the incoming byte 
0281 7582FF    1183            mov     dpl,#0xFF
0284 120100    1184            lcall   _SPIWrite
0287           1185   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:432: spiBytes[spiByteNum] = SPI0DAT;
0287 E5D8      1186            mov     a,_spiByteNum
0289 25D8      1187            add     a,_spiByteNum
028B FA        1188            mov     r2,a
028C E5D9      1189            mov     a,(_spiByteNum + 1)
028E 33        1190            rlc     a
028F EA        1191            mov     a,r2
0290 2498      1192            add     a,#_spiBytes
0292 F8        1193            mov     r0,a
0293 AAA3      1194            mov     r2,_SPI0DAT
0295 7B00      1195            mov     r3,#0x00
0297 A602      1196            mov     @r0,ar2
0299 08        1197            inc     r0
029A A603      1198            mov     @r0,ar3
029C           1199   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:433: spiByteNum++;
029C 05D8      1200            inc     _spiByteNum
029E E4        1201            clr     a
029F B5D8A8    1202            cjne    a,_spiByteNum,L012021?
02A2 05D9      1203            inc     (_spiByteNum + 1)
02A4           1204   L012021?:
02A4           1205   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:435: delay_us(50); //Time to wait between second start byte and byte 0
02A4 900032    1206            mov     dptr,#0x0032
02A7 020100    1207            ljmp    _delay_us
02AA           1208   L012010?:
02AA           1209   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:440: if(spiByteNum < 10)
02AA C3        1210            clr     c
02AB E5D8      1211            mov     a,_spiByteNum
02AD 940A      1212            subb    a,#0x0A
02AF E5D9      1213            mov     a,(_spiByteNum + 1)
02B1 9400      1214            subb    a,#0x00
02B3 5001      1215            jnc     L012007?
02B5           1216   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:442: SPIWrite(0xFF); //Keep writing all-Hi to obtain reading from MISO
02B5 7582FF    1217            mov     dpl,#0xFF
02B8 120100    1218            lcall   _SPIWrite
02BB           1219   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:443: spiBytes[spiByteNum] = SPI0DAT;
02BB E5D8      1220            mov     a,_spiByteNum
02BD 25D8      1221            add     a,_spiByteNum
02BF FA        1222            mov     r2,a
02C0 E5D9      1223            mov     a,(_spiByteNum + 1)
02C2 33        1224            rlc     a
02C3 EA        1225            mov     a,r2
02C4 2498      1226            add     a,#_spiBytes
02C6 F8        1227            mov     r0,a
02C7 AAA3      1228            mov     r2,_SPI0DAT
02C9 7B00      1229            mov     r3,#0x00
02CB A602      1230            mov     @r0,ar2
02CD 08        1231            inc     r0
02CE A603      1232            mov     @r0,ar3
02D0           1233   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:444: spiByteNum++;
02D0 05D8      1234            inc     _spiByteNum
02D2 E4        1235            clr     a
02D3 B5D828    1236            cjne    a,_spiByteNum,L012023?
02D6 05D9      1237            inc     (_spiByteNum + 1)
02D8           1238   L012023?:
02D8           1239   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:446: delay_us(40); //Time to wait between each byte
02D8 900028    1240            mov     dptr,#0x0028
02DB 020100    1241            ljmp    _delay_us
02DE           1242   L012007?:
02DE           1243   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:450: MASTER_SS = 1; //Deselect the wind sensor
02DE D2A0      1244            setb    _P2_0
02E0           1245   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:452: delay_us(1600); //Wait for at least 1.5ms for data synchronization
02E0 900640    1246            mov     dptr,#0x0640
02E3 120100    1247            lcall   _delay_us
02E6           1248   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:454: spiByteNum = 0; //Reset the transfer array number
02E6 E4        1249            clr     a
02E7 F5D8      1250            mov     _spiByteNum,a
02E9 F5D9      1251            mov     (_spiByteNum + 1),a
02EB           1252   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:456: tempNormal = (spiBytes[2] << 8) + spiBytes[3]; //Save the angle data 
02EB AB9C      1253            mov     r3,(_spiBytes + 0x0004)
02ED 7A00      1254            mov     r2,#0x00
02EF E59E      1255            mov     a,(_spiBytes + 0x0006)
02F1 2A        1256            add     a,r2
02F2 FA        1257            mov     r2,a
02F3 E59F      1258            mov     a,((_spiBytes + 0x0006) + 1)
02F5 3B        1259            addc    a,r3
02F6 FB        1260            mov     r3,a
02F7           1261   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:458: if((spiBytes[3] & 1) == 1) //If the data read is accurate (if the LSB is 1, the data is valid)
02F7 E4        1262            clr     a
02F8 FC        1263            mov     r4,a
02F9 FD        1264            mov     r5,a
02FA 7401      1265            mov     a,#0x01
02FC 559E      1266            anl     a,(_spiBytes + 0x0006)
02FE FE        1267            mov     r6,a
02FF 7F00      1268            mov     r7,#0x00
0301 BE0168    1269            cjne    r6,#0x01,L012012?
0304 BF0068    1270            cjne    r7,#0x00,L012012?
0307           1271   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:460: windAngle = (tempNormal >> 2); //Shift the angle to the right twice
0307 ED        1272            mov     a,r5
0308 C3        1273            clr     c
0309 13        1274            rrc     a
030A FD        1275            mov     r5,a
030B EC        1276            mov     a,r4
030C 13        1277            rrc     a
030D FC        1278            mov     r4,a
030E EB        1279            mov     a,r3
030F 13        1280            rrc     a
0310 FB        1281            mov     r3,a
0311 EA        1282            mov     a,r2
0312 13        1283            rrc     a
0313 FA        1284            mov     r2,a
0314 ED        1285            mov     a,r5
0315 C3        1286            clr     c
0316 13        1287            rrc     a
0317 FD        1288            mov     r5,a
0318 EC        1289            mov     a,r4
0319 13        1290            rrc     a
031A FC        1291            mov     r4,a
031B EB        1292            mov     a,r3
031C 13        1293            rrc     a
031D FB        1294            mov     r3,a
031E EA        1295            mov     a,r2
031F 13        1296            rrc     a
0320 F582      1297            mov     dpl,a
0322 8B83      1298            mov     dph,r3
0324 8CF0      1299            mov     b,r4
0326 ED        1300            mov     a,r5
0327 120100    1301            lcall   ___ulong2fs
032A 858218    1302            mov     _windAngle,dpl
032D 858319    1303            mov     (_windAngle + 1),dph
0330 85F01A    1304            mov     (_windAngle + 2),b
0333 F51B      1305            mov     (_windAngle + 3),a
0335           1306   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:461: windAngle *= (3600.0/163840.0); //Convert the angle to degrees
0335 C018      1307            push    _windAngle
0337 C019      1308            push    (_windAngle + 1)
0339 C01A      1309            push    (_windAngle + 2)
033B C01B      1310            push    (_windAngle + 3)
033D 900000    1311            mov     dptr,#0x0000
0340 75F0B4    1312            mov     b,#0xB4
0343 743C      1313            mov     a,#0x3C
0345 120100    1314            lcall   ___fsmul
0348 858218    1315            mov     _windAngle,dpl
034B 858319    1316            mov     (_windAngle + 1),dph
034E 85F01A    1317            mov     (_windAngle + 2),b
0351 F51B      1318            mov     (_windAngle + 3),a
0353 E581      1319            mov     a,sp
0355 24FC      1320            add     a,#0xfc
0357 F581      1321            mov     sp,a
0359           1322   L012012?:
0359 22        1323            ret
035A           1324   ;------------------------------------------------------------
035A           1325   ;Allocation info for local variables in function 'calculateSteps'
035A           1326   ;------------------------------------------------------------
035A           1327   ;stepAngle                 Allocated to registers 
035A           1328   ;------------------------------------------------------------
035A           1329   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:472: void calculateSteps()
035A           1330   ;        -----------------------------------------
035A           1331   ;         function calculateSteps
035A           1332   ;        -----------------------------------------
035A           1333   _calculateSteps:
035A           1334   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:477: if((windAngle >= stepAngle) & (windAngle <= (360.0 - stepAngle))) 
035A E4        1335            clr     a
035B C0E0      1336            push    acc
035D C0E0      1337            push    acc
035F 7434      1338            mov     a,#0x34
0361 C0E0      1339            push    acc
0363 7441      1340            mov     a,#0x41
0365 C0E0      1341            push    acc
0367 851882    1342            mov     dpl,_windAngle
036A 851983    1343            mov     dph,(_windAngle + 1)
036D 851AF0    1344            mov     b,(_windAngle + 2)
0370 E51B      1345            mov     a,(_windAngle + 3)
0372 120100    1346            lcall   ___fslt
0375 AA82      1347            mov     r2,dpl
0377 E581      1348            mov     a,sp
0379 24FC      1349            add     a,#0xfc
037B F581      1350            mov     sp,a
037D EA        1351            mov     a,r2
037E B40128    1352            cjne    a,#0x01,L013011?
0381           1353   L013011?:
0381 E4        1354            clr     a
0382 33        1355            rlc     a
0383 FA        1356            mov     r2,a
0384 C002      1357            push    ar2
0386 E4        1358            clr     a
0387 C0E0      1359            push    acc
0389 7460      1360            mov     a,#0x60
038B C0E0      1361            push    acc
038D 74AE      1362            mov     a,#0xAE
038F C0E0      1363            push    acc
0391 7443      1364            mov     a,#0x43
0393 C0E0      1365            push    acc
0395 851882    1366            mov     dpl,_windAngle
0398 851983    1367            mov     dph,(_windAngle + 1)
039B 851AF0    1368            mov     b,(_windAngle + 2)
039E E51B      1369            mov     a,(_windAngle + 3)
03A0 120100    1370            lcall   ___fsgt
03A3 AB82      1371            mov     r3,dpl
03A5 E581      1372            mov     a,sp
03A7 24FC      1373            add     a,#0xfc
03A9 F581      1374            mov     sp,a
03AB D002      1375            pop     ar2
03AD EB        1376            mov     a,r3
03AE B401A8    1377            cjne    a,#0x01,L013012?
03B1           1378   L013012?:
03B1 E4        1379            clr     a
03B2 33        1380            rlc     a
03B3 FB        1381            mov     r3,a
03B4 5A        1382            anl     a,r2
03B5 7001      1383            jnz     L013013?
03B7 020100    1384            ljmp    L013005?
03BA           1385   L013013?:
03BA           1386   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:480: moveStepperFlag = 1;
03BA 75B001    1387            mov     _moveStepperFlag,#0x01
03BD           1388   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:483: if(windAngle <= 180.0) 
03BD E4        1389            clr     a
03BE C0E0      1390            push    acc
03C0 C0E0      1391            push    acc
03C2 7434      1392            mov     a,#0x34
03C4 C0E0      1393            push    acc
03C6 7443      1394            mov     a,#0x43
03C8 C0E0      1395            push    acc
03CA 851882    1396            mov     dpl,_windAngle
03CD 851983    1397            mov     dph,(_windAngle + 1)
03D0 851AF0    1398            mov     b,(_windAngle + 2)
03D3 E51B      1399            mov     a,(_windAngle + 3)
03D5 120100    1400            lcall   ___fsgt
03D8 AA82      1401            mov     r2,dpl
03DA E581      1402            mov     a,sp
03DC 24FC      1403            add     a,#0xfc
03DE F581      1404            mov     sp,a
03E0 EA        1405            mov     a,r2
03E1 7001      1406            jnz     L013002?
03E3           1407   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:485: direction = 1;
03E3 75F001    1408            mov     _direction,#0x01
03E6           1409   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:486: stepsCW = windAngle/stepAngle;
03E6 E4        1410            clr     a
03E7 C0E0      1411            push    acc
03E9 C0E0      1412            push    acc
03EB 7434      1413            mov     a,#0x34
03ED C0E0      1414            push    acc
03EF 7441      1415            mov     a,#0x41
03F1 C0E0      1416            push    acc
03F3 851882    1417            mov     dpl,_windAngle
03F6 851983    1418            mov     dph,(_windAngle + 1)
03F9 851AF0    1419            mov     b,(_windAngle + 2)
03FC E51B      1420            mov     a,(_windAngle + 3)
03FE 120100    1421            lcall   ___fsdiv
0401 AA82      1422            mov     r2,dpl
0403 AB83      1423            mov     r3,dph
0405 ACF0      1424            mov     r4,b
0407 FD        1425            mov     r5,a
0408 E581      1426            mov     a,sp
040A 24FC      1427            add     a,#0xfc
040C F581      1428            mov     sp,a
040E 8A82      1429            mov     dpl,r2
0410 8B83      1430            mov     dph,r3
0412 8CF0      1431            mov     b,r4
0414 ED        1432            mov     a,r5
0415 120100    1433            lcall   ___fs2uchar
0418 858260    1434            mov     _stepsCW,dpl
041B 22        1435            ret
041C           1436   L013002?:
041C           1437   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:490: direction = 0;
041C           1438   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:491: stepsCCW = (windAngle - 180.0)/stepAngle;
041C E4        1439            clr     a
041D F5F0      1440            mov     _direction,a
041F C0E0      1441            push    acc
0421 C0E0      1442            push    acc
0423 7434      1443            mov     a,#0x34
0425 C0E0      1444            push    acc
0427 7443      1445            mov     a,#0x43
0429 C0E0      1446            push    acc
042B 851882    1447            mov     dpl,_windAngle
042E 851983    1448            mov     dph,(_windAngle + 1)
0431 851AF0    1449            mov     b,(_windAngle + 2)
0434 E51B      1450            mov     a,(_windAngle + 3)
0436 120100    1451            lcall   ___fssub
0439 AA82      1452            mov     r2,dpl
043B AB83      1453            mov     r3,dph
043D ACF0      1454            mov     r4,b
043F FD        1455            mov     r5,a
0440 E581      1456            mov     a,sp
0442 24FC      1457            add     a,#0xfc
0444 F581      1458            mov     sp,a
0446 E4        1459            clr     a
0447 C0E0      1460            push    acc
0449 C0E0      1461            push    acc
044B 7434      1462            mov     a,#0x34
044D C0E0      1463            push    acc
044F 7441      1464            mov     a,#0x41
0451 C0E0      1465            push    acc
0453 8A82      1466            mov     dpl,r2
0455 8B83      1467            mov     dph,r3
0457 8CF0      1468            mov     b,r4
0459 ED        1469            mov     a,r5
045A 120100    1470            lcall   ___fsdiv
045D AA82      1471            mov     r2,dpl
045F AB83      1472            mov     r3,dph
0461 ACF0      1473            mov     r4,b
0463 FD        1474            mov     r5,a
0464 E581      1475            mov     a,sp
0466 24FC      1476            add     a,#0xfc
0468 F581      1477            mov     sp,a
046A 8A82      1478            mov     dpl,r2
046C 8B83      1479            mov     dph,r3
046E 8CF0      1480            mov     b,r4
0470 ED        1481            mov     a,r5
0471 120100    1482            lcall   ___fs2uchar
0474 858220    1483            mov     _stepsCCW,dpl
0477 22        1484            ret
0478           1485   L013005?:
0478           1486   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:496: moveStepperFlag = 0;
0478 75B000    1487            mov     _moveStepperFlag,#0x00
047B           1488   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:497: stepsCCW = 0;
047B 752000    1489            mov     _stepsCCW,#0x00
047E           1490   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:498: stepsCW = 0;
047E 756000    1491            mov     _stepsCW,#0x00
0481 22        1492            ret
0482           1493   ;------------------------------------------------------------
0482           1494   ;Allocation info for local variables in function 'main'
0482           1495   ;------------------------------------------------------------
0482           1496   ;vReadings                 Allocated with name '_main_vReadings_1_90'
0482           1497   ;voltages                  Allocated with name '_main_voltages_1_90'
0482           1498   ;measureCount              Allocated with name '_main_measureCount_1_90'
0482           1499   ;totalMeasurements         Allocated to registers 
0482           1500   ;errorConstant             Allocated to registers 
0482           1501   ;readingADCCounter         Allocated to registers r4 r5 
0482           1502   ;readingADCTotalInterrupts Allocated to registers 
0482           1503   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0482           1504   ;------------------------------------------------------------
0482           1505   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:503: void main (void) 
0482           1506   ;        -----------------------------------------
0482           1507   ;         function main
0482           1508   ;        -----------------------------------------
0482           1509   _main:
0482           1510   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:511: int measureCount = 0;
0482           1511   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:516: int readingADCCounter = 0;
0482 E4        1512            clr     a
0483 F5E0      1513            mov     _main_measureCount_1_90,a
0485 F5E1      1514            mov     (_main_measureCount_1_90 + 1),a
0487 FC        1515            mov     r4,a
0488 FD        1516            mov     r5,a
0489           1517   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:519: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0489 C004      1518            push    ar4
048B C005      1519            push    ar5
048D 7428      1520            mov     a,#__str_0
048F C0E0      1521            push    acc
0491 74C8      1522            mov     a,#(__str_0 >> 8)
0493 C0E0      1523            push    acc
0495 7480      1524            mov     a,#0x80
0497 C0E0      1525            push    acc
0499 120100    1526            lcall   _printf
049C 1581      1527            dec     sp
049E 1581      1528            dec     sp
04A0 1581      1529            dec     sp
04A2           1530   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:521: ConfigurePins();
04A2 120100    1531            lcall   _ConfigurePins
04A5           1532   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:522: ConfigPCA0();
04A5 120100    1533            lcall   _ConfigPCA0
04A8           1534   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:523: InitADC();
04A8 120100    1535            lcall   _InitADC
04AB D005      1536            pop     ar5
04AD D004      1537            pop     ar4
04AF           1538   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:525: while(1) //Main loop of the program begins here
04AF           1539   L014010?:
04AF           1540   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:529: if(adcFlag == 1)
04AF 7401      1541            mov     a,#0x01
04B1 B530E8    1542            cjne    a,_adcFlag,L014018?
04B4 8001      1543            sjmp    L014019?
04B6           1544   L014018?:
04B6 020100    1545            ljmp    L014008?
04B9           1546   L014019?:
04B9           1547   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:532: adcFlag = 0;
04B9 753000    1548            mov     _adcFlag,#0x00
04BC           1549   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:535: if(readingADCCounter < readingADCTotalInterrupts)
04BC C3        1550            clr     c
04BD EC        1551            mov     a,r4
04BE 9414      1552            subb    a,#0x14
04C0 ED        1553            mov     a,r5
04C1 6480      1554            xrl     a,#0x80
04C3 9480      1555            subb    a,#0x80
04C5 5001      1556            jnc     L014005?
04C7           1557   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:536: readingADCCounter++;
04C7 0C        1558            inc     r4
04C8 BC00E8    1559            cjne    r4,#0x00,L014021?
04CB 0D        1560            inc     r5
04CC           1561   L014021?:
04CC 020100    1562            ljmp    L014008?
04CF           1563   L014005?:
04CF           1564   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:540: if(measureCount < totalMeasurements)
04CF C3        1565            clr     c
04D0 E5E0      1566            mov     a,_main_measureCount_1_90
04D2 9414      1567            subb    a,#0x14
04D4 E5E1      1568            mov     a,(_main_measureCount_1_90 + 1)
04D6 6480      1569            xrl     a,#0x80
04D8 9480      1570            subb    a,#0x80
04DA 4001      1571            jc      L014022?
04DC 020100    1572            ljmp    L014002?
04DF           1573   L014022?:
04DF           1574   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:543: voltages[0] += Volts_at_Pin(QFP32_MUX_P1_3);
04DF 859020    1575            mov     _main_sloc0_1_0,_main_voltages_1_90
04E2 859121    1576            mov     (_main_sloc0_1_0 + 1),(_main_voltages_1_90 + 1)
04E5 859222    1577            mov     (_main_sloc0_1_0 + 2),(_main_voltages_1_90 + 2)
04E8 859323    1578            mov     (_main_sloc0_1_0 + 3),(_main_voltages_1_90 + 3)
04EB 758209    1579            mov     dpl,#0x09
04EE 120100    1580            lcall   _Volts_at_Pin
04F1 AA82      1581            mov     r2,dpl
04F3 AB83      1582            mov     r3,dph
04F5 AEF0      1583            mov     r6,b
04F7 FF        1584            mov     r7,a
04F8 C002      1585            push    ar2
04FA C003      1586            push    ar3
04FC C006      1587            push    ar6
04FE C007      1588            push    ar7
0500 852082    1589            mov     dpl,_main_sloc0_1_0
0503 852183    1590            mov     dph,(_main_sloc0_1_0 + 1)
0506 8522F0    1591            mov     b,(_main_sloc0_1_0 + 2)
0509 E523      1592            mov     a,(_main_sloc0_1_0 + 3)
050B 120100    1593            lcall   ___fsadd
050E AA82      1594            mov     r2,dpl
0510 AB83      1595            mov     r3,dph
0512 AEF0      1596            mov     r6,b
0514 FF        1597            mov     r7,a
0515 E581      1598            mov     a,sp
0517 24FC      1599            add     a,#0xfc
0519 F581      1600            mov     sp,a
051B 8A90      1601            mov     _main_voltages_1_90,r2
051D 8B91      1602            mov     (_main_voltages_1_90 + 1),r3
051F 8E92      1603            mov     (_main_voltages_1_90 + 2),r6
0521 8F93      1604            mov     (_main_voltages_1_90 + 3),r7
0523           1605   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:544: voltages[1] += Volts_at_Pin(QFP32_MUX_P0_2);
0523 859420    1606            mov     _main_sloc0_1_0,(_main_voltages_1_90 + 0x0004)
0526 859521    1607            mov     (_main_sloc0_1_0 + 1),((_main_voltages_1_90 + 0x0004) + 1)
0529 859622    1608            mov     (_main_sloc0_1_0 + 2),((_main_voltages_1_90 + 0x0004) + 2)
052C 859723    1609            mov     (_main_sloc0_1_0 + 3),((_main_voltages_1_90 + 0x0004) + 3)
052F 758201    1610            mov     dpl,#0x01
0532 120100    1611            lcall   _Volts_at_Pin
0535 AA82      1612            mov     r2,dpl
0537 AB83      1613            mov     r3,dph
0539 AEF0      1614            mov     r6,b
053B FF        1615            mov     r7,a
053C C002      1616            push    ar2
053E C003      1617            push    ar3
0540 C006      1618            push    ar6
0542 C007      1619            push    ar7
0544 852082    1620            mov     dpl,_main_sloc0_1_0
0547 852183    1621            mov     dph,(_main_sloc0_1_0 + 1)
054A 8522F0    1622            mov     b,(_main_sloc0_1_0 + 2)
054D E523      1623            mov     a,(_main_sloc0_1_0 + 3)
054F 120100    1624            lcall   ___fsadd
0552 AA82      1625            mov     r2,dpl
0554 AB83      1626            mov     r3,dph
0556 AEF0      1627            mov     r6,b
0558 FF        1628            mov     r7,a
0559 E581      1629            mov     a,sp
055B 24FC      1630            add     a,#0xfc
055D F581      1631            mov     sp,a
055F 8A94      1632            mov     (_main_voltages_1_90 + 0x0004),r2
0561 8B95      1633            mov     ((_main_voltages_1_90 + 0x0004) + 1),r3
0563 8E96      1634            mov     ((_main_voltages_1_90 + 0x0004) + 2),r6
0565 8F97      1635            mov     ((_main_voltages_1_90 + 0x0004) + 3),r7
0567           1636   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:547: measureCount++;
0567 05E0      1637            inc     _main_measureCount_1_90
0569 E4        1638            clr     a
056A B5E0E8    1639            cjne    a,_main_measureCount_1_90,L014023?
056D 05E1      1640            inc     (_main_measureCount_1_90 + 1)
056F           1641   L014023?:
056F 020100    1642            ljmp    L014003?
0572           1643   L014002?:
0572           1644   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:552: vReadings[0] = (voltages[0]/totalMeasurements) - errorConstant;
0572 E4        1645            clr     a
0573 C0E0      1646            push    acc
0575 C0E0      1647            push    acc
0577 74A0      1648            mov     a,#0xA0
0579 C0E0      1649            push    acc
057B 7441      1650            mov     a,#0x41
057D C0E0      1651            push    acc
057F 859082    1652            mov     dpl,_main_voltages_1_90
0582 859183    1653            mov     dph,(_main_voltages_1_90 + 1)
0585 8592F0    1654            mov     b,(_main_voltages_1_90 + 2)
0588 E593      1655            mov     a,(_main_voltages_1_90 + 3)
058A 120100    1656            lcall   ___fsdiv
058D AA82      1657            mov     r2,dpl
058F AB83      1658            mov     r3,dph
0591 AEF0      1659            mov     r6,b
0593 FF        1660            mov     r7,a
0594 E581      1661            mov     a,sp
0596 24FC      1662            add     a,#0xfc
0598 F581      1663            mov     sp,a
059A 749A      1664            mov     a,#0x9A
059C C0E0      1665            push    acc
059E 7499      1666            mov     a,#0x99
05A0 C0E0      1667            push    acc
05A2 C0E0      1668            push    acc
05A4 743E      1669            mov     a,#0x3E
05A6 C0E0      1670            push    acc
05A8 8A82      1671            mov     dpl,r2
05AA 8B83      1672            mov     dph,r3
05AC 8EF0      1673            mov     b,r6
05AE EF        1674            mov     a,r7
05AF 120100    1675            lcall   ___fssub
05B2 858220    1676            mov     _main_sloc0_1_0,dpl
05B5 858321    1677            mov     (_main_sloc0_1_0 + 1),dph
05B8 85F022    1678            mov     (_main_sloc0_1_0 + 2),b
05BB F523      1679            mov     (_main_sloc0_1_0 + 3),a
05BD E581      1680            mov     a,sp
05BF 24FC      1681            add     a,#0xfc
05C1 F581      1682            mov     sp,a
05C3 852040    1683            mov     _main_vReadings_1_90,_main_sloc0_1_0
05C6 852141    1684            mov     (_main_vReadings_1_90 + 1),(_main_sloc0_1_0 + 1)
05C9 852242    1685            mov     (_main_vReadings_1_90 + 2),(_main_sloc0_1_0 + 2)
05CC 852343    1686            mov     (_main_vReadings_1_90 + 3),(_main_sloc0_1_0 + 3)
05CF           1687   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:553: vReadings[1] = (voltages[1]/totalMeasurements) - errorConstant;
05CF E4        1688            clr     a
05D0 C0E0      1689            push    acc
05D2 C0E0      1690            push    acc
05D4 74A0      1691            mov     a,#0xA0
05D6 C0E0      1692            push    acc
05D8 7441      1693            mov     a,#0x41
05DA C0E0      1694            push    acc
05DC 859482    1695            mov     dpl,(_main_voltages_1_90 + 0x0004)
05DF 859583    1696            mov     dph,((_main_voltages_1_90 + 0x0004) + 1)
05E2 8596F0    1697            mov     b,((_main_voltages_1_90 + 0x0004) + 2)
05E5 E597      1698            mov     a,((_main_voltages_1_90 + 0x0004) + 3)
05E7 120100    1699            lcall   ___fsdiv
05EA AA82      1700            mov     r2,dpl
05EC AB83      1701            mov     r3,dph
05EE AEF0      1702            mov     r6,b
05F0 FF        1703            mov     r7,a
05F1 E581      1704            mov     a,sp
05F3 24FC      1705            add     a,#0xfc
05F5 F581      1706            mov     sp,a
05F7 749A      1707            mov     a,#0x9A
05F9 C0E0      1708            push    acc
05FB 7499      1709            mov     a,#0x99
05FD C0E0      1710            push    acc
05FF C0E0      1711            push    acc
0601 743E      1712            mov     a,#0x3E
0603 C0E0      1713            push    acc
0605 8A82      1714            mov     dpl,r2
0607 8B83      1715            mov     dph,r3
0609 8EF0      1716            mov     b,r6
060B EF        1717            mov     a,r7
060C 120100    1718            lcall   ___fssub
060F AA82      1719            mov     r2,dpl
0611 AB83      1720            mov     r3,dph
0613 AEF0      1721            mov     r6,b
0615 FF        1722            mov     r7,a
0616 E581      1723            mov     a,sp
0618 24FC      1724            add     a,#0xfc
061A F581      1725            mov     sp,a
061C 8A44      1726            mov     (_main_vReadings_1_90 + 0x0004),r2
061E 8B45      1727            mov     ((_main_vReadings_1_90 + 0x0004) + 1),r3
0620 8E46      1728            mov     ((_main_vReadings_1_90 + 0x0004) + 2),r6
0622 8F47      1729            mov     ((_main_vReadings_1_90 + 0x0004) + 3),r7
0624           1730   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:556: printf("V(P1.3)=%3.2fV, V(P0.2)=%3.2fV Wind = %.2f degrees\r", vReadings[0], vReadings[1], windAngle);
0624 C018      1731            push    _windAngle
0626 C019      1732            push    (_windAngle + 1)
0628 C01A      1733            push    (_windAngle + 2)
062A C01B      1734            push    (_windAngle + 3)
062C C002      1735            push    ar2
062E C003      1736            push    ar3
0630 C006      1737            push    ar6
0632 C007      1738            push    ar7
0634 C020      1739            push    _main_sloc0_1_0
0636 C021      1740            push    (_main_sloc0_1_0 + 1)
0638 C022      1741            push    (_main_sloc0_1_0 + 2)
063A C023      1742            push    (_main_sloc0_1_0 + 3)
063C 7468      1743            mov     a,#__str_1
063E C0E0      1744            push    acc
0640 74CB      1745            mov     a,#(__str_1 >> 8)
0642 C0E0      1746            push    acc
0644 7480      1747            mov     a,#0x80
0646 C0E0      1748            push    acc
0648 120100    1749            lcall   _printf
064B E581      1750            mov     a,sp
064D 24F1      1751            add     a,#0xf1
064F F581      1752            mov     sp,a
0651           1753   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:559: measureCount = 0;
0651           1754   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:560: voltages[0] = 0;
0651 E4        1755            clr a
0652 F5E0      1756            mov _main_measureCount_1_90,a
0654 F5E1      1757            mov (_main_measureCount_1_90 + 1),a
0656 F590      1758            mov _main_voltages_1_90,a
0658 F591      1759            mov (_main_voltages_1_90 + 1),a
065A F592      1760            mov (_main_voltages_1_90 + 2),a
065C F593      1761            mov (_main_voltages_1_90 + 3),a
065E           1762   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:561: voltages[1] = 0;
065E 759400    1763            mov     (_main_voltages_1_90 + 0x0004),#0x00
0661 759500    1764            mov     ((_main_voltages_1_90 + 0x0004) + 1),#0x00
0664 759600    1765            mov     ((_main_voltages_1_90 + 0x0004) + 2),#0x00
0667 759700    1766            mov     ((_main_voltages_1_90 + 0x0004) + 3),#0x00
066A           1767   L014003?:
066A           1768   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:565: readingADCCounter = 0;
066A 7C00      1769            mov     r4,#0x00
066C 7D00      1770            mov     r5,#0x00
066E           1771   L014008?:
066E           1772   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:569: wsReadByte();
066E C004      1773            push    ar4
0670 C005      1774            push    ar5
0672 120100    1775            lcall   _wsReadByte
0675           1776   ;        C:\Users\Fabian Lozano\Desktop\UBC\UBC3rdYear\Term 2\ELEC 391\Controller\Code\PCA.c:572: calculateSteps();
0675 120100    1777            lcall   _calculateSteps
0678 D005      1778            pop     ar5
067A D004      1779            pop     ar4
067C 020100    1780            ljmp    L014010?
067F           1781            rseg R_CSEG
067F           1782   
0000           1783            rseg R_XINIT
0000           1784   
0000           1785            rseg R_CONST
0000           1786   __str_0:
0000 1B        1787            db 0x1B
0001 5B324A    1788            db '[2J'
0004 00        1789            db 0x00
0005           1790   __str_1:
0005 56285031  1791            db 'V(P1.3)=%3.2fV, V(P0.2)=%3.2fV Wind = %.2f degrees'
     2E33293D
     25332E32
     66562C20
     56285030
     2E32293D
     25332E32
     66562057
     696E6420
     3D20252E
     32662064
     65677265
     6573
0037 0D        1792            db 0x0D
0038 00        1793            db 0x00
0039           1794   
0076           1795            CSEG
0076           1796   
0076           1797   end
